//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSE445_Assignment5.WeatherService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Conditions", Namespace="http://schemas.datacontract.org/2004/07/HealthService")]
    [System.SerializableAttribute()]
    public partial class Conditions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DayOfWeekField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HighField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TempFField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Condition {
            get {
                return this.ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionField, value) != true)) {
                    this.ConditionField = value;
                    this.RaisePropertyChanged("Condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DayOfWeek {
            get {
                return this.DayOfWeekField;
            }
            set {
                if ((object.ReferenceEquals(this.DayOfWeekField, value) != true)) {
                    this.DayOfWeekField = value;
                    this.RaisePropertyChanged("DayOfWeek");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string High {
            get {
                return this.HighField;
            }
            set {
                if ((object.ReferenceEquals(this.HighField, value) != true)) {
                    this.HighField = value;
                    this.RaisePropertyChanged("High");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Low {
            get {
                return this.LowField;
            }
            set {
                if ((object.ReferenceEquals(this.LowField, value) != true)) {
                    this.LowField = value;
                    this.RaisePropertyChanged("Low");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempF {
            get {
                return this.TempFField;
            }
            set {
                if ((object.ReferenceEquals(this.TempFField, value) != true)) {
                    this.TempFField = value;
                    this.RaisePropertyChanged("TempF");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getCurrentCondition", ReplyAction="http://tempuri.org/IWeatherService/getCurrentConditionResponse")]
        CSE445_Assignment5.WeatherService.Conditions getCurrentCondition(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getCurrentCondition", ReplyAction="http://tempuri.org/IWeatherService/getCurrentConditionResponse")]
        System.Threading.Tasks.Task<CSE445_Assignment5.WeatherService.Conditions> getCurrentConditionAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getForeCast", ReplyAction="http://tempuri.org/IWeatherService/getForeCastResponse")]
        CSE445_Assignment5.WeatherService.Conditions[] getForeCast(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getForeCast", ReplyAction="http://tempuri.org/IWeatherService/getForeCastResponse")]
        System.Threading.Tasks.Task<CSE445_Assignment5.WeatherService.Conditions[]> getForeCastAsync(string location);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : CSE445_Assignment5.WeatherService.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<CSE445_Assignment5.WeatherService.IWeatherService>, CSE445_Assignment5.WeatherService.IWeatherService {
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CSE445_Assignment5.WeatherService.Conditions getCurrentCondition(string location) {
            return base.Channel.getCurrentCondition(location);
        }
        
        public System.Threading.Tasks.Task<CSE445_Assignment5.WeatherService.Conditions> getCurrentConditionAsync(string location) {
            return base.Channel.getCurrentConditionAsync(location);
        }
        
        public CSE445_Assignment5.WeatherService.Conditions[] getForeCast(string location) {
            return base.Channel.getForeCast(location);
        }
        
        public System.Threading.Tasks.Task<CSE445_Assignment5.WeatherService.Conditions[]> getForeCastAsync(string location) {
            return base.Channel.getForeCastAsync(location);
        }
    }
}
